import mariadb             # Importerer MariaDB biblioteket, s친 vi kan forbinde og interagere med databasen
import time                # Importerer tidsmodul til forsinkelse i loopet
import RPi.GPIO as GPIO    # Importerer GPIO-biblioteket for at styre Raspberry Pi's pins

# --- GPIO Setup ---
MOTOR_PIN = 17             # Definerer hvilken GPIO pin motoren er forbundet til
GPIO.setmode(GPIO.BCM)     # Biblioteket Rpi.GPIO kr칝ver denne linje, da den ikke ved hvilke GPIO pins den skal bruge
GPIO.setup(MOTOR_PIN, GPIO.OUT)  # S칝tter motorens pin som OUTPUT, s친 vi kan sende signal

# --- Database konfiguration ---
db_config = {              # Opretter en dictionary med alle forbindelsesoplysninger
    "user": "admin",       # Brugernavn til databasen
    "password": "admin",   # Adgangskode til databasen
    "host": "152.115.77.165",  # IP-adressen p친 database-serveren
    "port": 50110,         # Portnummer MariaDB lytter p친
    "database": "motor"    # Navnet p친 databasen vi arbejder med
}

# Opret forbindelse til databasen og aktiver autocommit
# autocommit=True betyder at alle 칝ndringer (INSERT, UPDATE osv.) automatisk gemmes uden at kalde conn.commit()
conn = mariadb.connect(**db_config, autocommit=True)
cursor = conn.cursor()     # Opretter en cursor som g칮r at man kan skrive i og sende kommandoer og l칝se

# Start scriptet
try:
    last_status = None     # Gemmer status, s친 vi undg친r spam
    while True:            # Uendeligt loop
        cursor.execute("SELECT status FROM motor_kontrol WHERE id=1")  # Henter status fra r칝kke med id=1
        status = cursor.fetchone()[0]  # F친r v칝rdien ud af resultatet

        if status != last_status:     # Kun hvis v칝rdien er 칝ndret siden sidst
            if status == 1:
                GPIO.output(MOTOR_PIN, GPIO.HIGH)  # T칝nder for motoren (sender 3.3V til pin)
                print("游댢 Motor T칁NDT (GPIO HIGH)")
            else:
                GPIO.output(MOTOR_PIN, GPIO.LOW)   # Slukker for motoren
                print("游댋 Motor SLUKKET (GPIO LOW)")
            last_status = status      # Opdaterer sidste status

        time.sleep(0.5)  # Venter 0.5 sekunder f칮r n칝ste tjek, s친 vi ikke belaster systemet

except KeyboardInterrupt:  # Hvis brugeren trykker Ctrl+C
    print("Stopper scriptet...")

finally:
    GPIO.cleanup()         # Rydder op i GPIO (vigtigt s친 pins ikke forbliver i en forkert tilstand)
    conn.close()           # Lukker forbindelsen til databasen korrekt
